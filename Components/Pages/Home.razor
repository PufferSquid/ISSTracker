@page "/"
@using System.Diagnostics
@inject ISSService ISSService
@implements IDisposable

<PageTitle>ISS Tracker</PageTitle>

<h1>International Space Station Current Position</h1>

<div>
    Latitude: @position?.Latitude.ToString("0.0000")
</div>
<div>
    Longitude: @position?.Longitude.ToString("0.0000")
</div>
<div>
    Last Updated: @position?.Timestamp.ToString("HH:mm:ss")
</div>

<!-- Globe here! -->
<!--<WebGLGlobe Position="@position" />-->

<br />
<div>
    Debug: @debugMessage
</div>

@code {
    private TimeSpan timer = new TimeSpan();
    private ISSPosition? position;
    private CancellationTokenSource? _cts;
    private Task? _updateTask;
    private string debugMessage = "Initializing...";


    protected override async Task OnInitializedAsync()
    {
        debugMessage = "Starting initialization...";
        await LoadPosition();
        debugMessage = "Starting refresh loop...";
        StartAutoRefresh();
        debugMessage = "Initialization complete";
        StateHasChanged();
    }

    private async Task LoadPosition()
    {
        try
        {
            debugMessage = "Loading position...";
            position = await ISSService.GetCurrentPosition();
            debugMessage = $"Updated: {position.Latitude}, {position.Longitude}";
            Debug.WriteLine(debugMessage);
            StateHasChanged();
        }
        catch (Exception ex)
        {
            debugMessage = $"Error: {ex.Message}";
            Debug.WriteLine(debugMessage);
        }
    }

    private void StartAutoRefresh()
    {
        _cts = new CancellationTokenSource();
        debugMessage = "Creating update task...";
        StateHasChanged();

        // Store the task in a field to prevent garbage collection
        _updateTask = RunUpdateLoop(_cts.Token);
    }

    private async Task RunUpdateLoop(CancellationToken token)
    {
        try
        {
            debugMessage = "Loop started!";
            Debug.WriteLine(debugMessage);
            StateHasChanged();
            await Task.Yield(); // Force yield to ensure message updates

            while (!token.IsCancellationRequested)
            {
                debugMessage = $"Waiting... ({timer.TotalSeconds}s)";
                Debug.WriteLine(debugMessage);

                StateHasChanged();

                await Task.Delay(1000);

                debugMessage = $"Updating... ({timer.TotalSeconds}s)";
                Debug.WriteLine(debugMessage);

                Debug.WriteLine(token.IsCancellationRequested);


                await InvokeAsync(async () =>
                {
                    timer = timer.Add(TimeSpan.FromSeconds(1));
                    await LoadPosition();
                });

                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            debugMessage = $"Loop crashed: {ex.Message}";
            Debug.WriteLine(debugMessage);
            StateHasChanged();
        }
    }

    public async void Dispose()
    {
        Debug.WriteLine("Dispose");
        _cts?.Cancel();
        if (_updateTask != null)
        {
            await _updateTask; // Wait for clean completion
        }
        _cts?.Dispose();
    }
}