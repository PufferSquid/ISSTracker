@using System.Diagnostics
@implements IDisposable
@inject IJSRuntime JSRuntime

<div @ref="globeContainer" style="width:100%; height:500px;"></div>

@code {
    private ElementReference globeContainer;
    private DotNetObjectReference<WebGLGlobe>? objRef;
    private IJSObjectReference? globeModule;
    private ISSPosition? lastPosition;

    [Parameter]
    public ISSPosition? Position { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            objRef = DotNetObjectReference.Create(this);
            try
            {
                globeModule = await JSRuntime.InvokeAsync<IJSObjectReference>(
                    "import", "./js/globe.js");
                await globeModule.InvokeVoidAsync("initializeGlobe",
                    globeContainer, objRef);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error initializing globe: {ex.Message}");
            }
        }

        if (Position != null && Position != lastPosition)
        {
            lastPosition = Position;
            await UpdateIssPosition();
        }
    }

    [JSInvokable] 
    public async Task UpdateIssPosition()
    {
        try
        {
            if (globeModule != null && Position != null)
            {
                await globeModule.InvokeVoidAsync("updateIssPosition",
                    Position.Latitude, Position.Longitude);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error updating ISS position: {ex.Message}");
        }
    }

    public void Dispose()
    {
        objRef?.Dispose();
        globeModule?.DisposeAsync().AsTask().Wait();
    }
}