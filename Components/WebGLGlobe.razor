@implements IDisposable
@inject IJSRuntime JSRuntime

<div @ref="globeContainer" style="width:100%; height:500px;"></div>

@code {
    private ElementReference globeContainer;
    private DotNetObjectReference<WebGLGlobe>? objRef;
    private IJSObjectReference? globeModule;
    private ISSPosition? lastPosition;

    [Parameter]
    public ISSPosition? Position { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            objRef = DotNetObjectReference.Create(this);
            globeModule = await JSRuntime.InvokeAsync<IJSObjectReference>(
                "import", "./js/globe.js");
            await globeModule.InvokeVoidAsync("initializeGlobe",
                globeContainer, objRef);
        }

        if (Position != null && Position != lastPosition)
        {
            lastPosition = Position;
            await UpdateGlobePosition();
        }
    }

    private async Task UpdateGlobePosition()
    {
        if (globeModule != null && Position != null)
        {
            await globeModule.InvokeVoidAsync("updateIssPosition",
                Position.Latitude, Position.Longitude);
        }
    }

    public void Dispose()
    {
        objRef?.Dispose();
    }
}